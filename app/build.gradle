apply plugin: 'com.android.application'

/**
 * basic settings to have different flavors
 */
def debugSuffix = System.getProperty('debugSuffix', project.getProperties().get('debugSuffix', ''))
def final theApplicationId = "de.beusterse.abfallkalenderlandkreisrostock"

android {
    signingConfigs {
        release
    }
    compileSdkVersion 26
    buildToolsVersion '27.0.3'
    defaultConfig {
        applicationId theApplicationId
        minSdkVersion 14
        targetSdkVersion 26
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
        versionCode 17
        versionName "1.6"
    }
    flavorDimensions "app"
    productFlavors {
        dev {
            buildConfigField "String", "API_SUFFIX", "\"_dev\""
            applicationId = theApplicationId + ".dev" + debugSuffix
        }
        full {
            buildConfigField "String", "API_SUFFIX", ""
        }
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.release
        }
    }

    testOptions {
        unitTests {
            returnDefaultValues = true
        }
    }
}

dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')
    implementation 'com.android.support:appcompat-v7:26.1.0'
    implementation 'com.android.support:design:26.1.0'
    implementation 'com.android.support:support-v4:26.1.0'
    implementation 'com.google.code.gson:gson:2.8.2'
    testImplementation 'junit:junit:4.12'
    testImplementation 'org.mockito:mockito-core:1.10.19'
    androidTestImplementation 'com.android.support.test:runner:1.0.2'
    androidTestImplementation 'junit:junit:4.12'
    androidTestImplementation 'org.mockito:mockito-core:1.10.19'
}

/**
 * loading signing data (keystore, passwords, alias) if the
 * keystore.properties file in the root directory can be read
 */
Properties props = new Properties()

if (file('../keystore.properties').exists()) {
    props.load(new FileInputStream(file('../keystore.properties')))

    if (props != null && props.containsKey('STORE_FILE') && props.containsKey('STORE_PASSWORD')
            && props.containsKey('KEY_ALIAS') && props.containsKey('KEY_PASSWORD')) {
        android.signingConfigs.release.storeFile = file(props['STORE_FILE'])
        android.signingConfigs.release.storePassword = props['STORE_PASSWORD']
        android.signingConfigs.release.keyAlias = props['KEY_ALIAS']
        android.signingConfigs.release.keyPassword = props['KEY_PASSWORD']

    } else {
        println 'keystore.properties found, but some entries are missing'
        android.buildTypes.release.signingConfig = null
    }
} else {
    println 'keystore.properties not found'
    android.buildTypes.release.signingConfig = null
}
